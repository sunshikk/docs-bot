from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ContentType, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import os
import asyncio
import openai

bot = Bot(token=os.environ["TOKEN"])
dp = Dispatcher()
router = Router()

USER_DOCS_PATH = "./user_docs"
openai.api_key = os.environ["OPENAI_TOKEN"]

documents = []  # –•—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–º—è—Ç–∏

ADMIN_USER_ID = 1574455983
upload = 0

upl = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
])

async def load_documents():
    global documents
    documents = []
    if not os.path.exists(USER_DOCS_PATH):
        os.makedirs(USER_DOCS_PATH)
    for file_name in os.listdir(USER_DOCS_PATH):
        if file_name.endswith((".md", ".rst")):
            with open(os.path.join(USER_DOCS_PATH, file_name), "r", encoding="utf-8") as f:
                documents.append(f.read())

@router.message(CommandStart())
async def start(message: Message):
    await message.answer("üëãüèª –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å/–æ—à–∏–±–∫—É, –∏ —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
    if message.from_user.id == ADMIN_USER_ID:
        keyb = [
            [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
        await message.answer("üõ†Ô∏è‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä—è–¥ —Ñ—É–Ω–∫—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ —É –í–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω–∫–∞.", reply_markup=keyboard)

@router.message(Command("sync"))
async def sync_docs(message: Message):
    if message.from_user.id == ADMIN_USER_ID:
        if not os.path.exists(USER_DOCS_PATH):
            os.makedirs(USER_DOCS_PATH)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .md –∏–ª–∏ .rst –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")

@router.message(lambda message: message.content_type == ContentType.DOCUMENT)
async def handle_document(message: Message):
    if message.from_user.id == ADMIN_USER_ID and upload == 1:
        file = message.document
        file_path = os.path.join(USER_DOCS_PATH, file.file_name)
        
        file_info = await bot.get_file(file.file_id)
        await bot.download_file(file_info.file_path, file_path)
        
        if file_path.endswith(('.md', '.rst')):
            with open(file_path, "r", encoding="utf-8") as f:
                documents.append(f.read())
            await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {file.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .md –∏–ª–∏ .rst.")

@router.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def upload_docs(message: Message):
    global upload
    if message.from_user.id == ADMIN_USER_ID and upload == 0:
        upload = 1
        await message.answer("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .md, .rst", reply_markup=upl)

@router.message()
async def search_docs(message: Message):
    if message.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã" or message.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        return
    
    idmes = await message.answer("ü§î –î—É–º–∞–µ—Ç...")
    query = message.text
    context = "\n\n".join(documents[-10:]) if documents else "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    print(context)
    
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–≤–µ—á–∞—é—â–∏–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, —Å–∫–∞–∂–∏ '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'."},
                {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –°–¢–†–û–ì–û –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –ø–æ –∑–∞–ø—Ä–æ—Å—É."},
                {"role": "system", "content": "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–∏—à–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ ###, –ª—É—á—à–µ –≤—ã–¥–µ–ª—è–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è **—Ç–µ–∫—Å—Ç**."},
                {"role": "system", "content": "–¢–∞–∫–∂–µ –ø—Ä–∏–ª–∞–≥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω—è—è –µ—ë, –Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–µ –≤–µ–∑–¥–µ. (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û)"},
                {"role": "system", "content": "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ç–æ–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—è –∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—è, –∏ –Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –º–µ–Ω—è–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏."},
                {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–í–æ–ø—Ä–æ—Å: {query}"}
            ]
        )
        answer = response.choices[0].message.content  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    await bot.delete_message(message.chat.id, idmes.message_id)
    await message.answer(answer, parse_mode="Markdown")

@router.callback_query() 
async def process_callback(callback_query: CallbackQuery): 
    data = callback_query.data

    if data == "cancel":
        upload = 0
        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

async def main():
    await load_documents()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")

# from aiogram import Bot, Dispatcher, Router, F
# from aiogram.types import Message, ContentType, CallbackQuery
# from aiogram.filters import CommandStart, Command
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
# import os
# import asyncio
# import openai

# bot = Bot(token="7543825811:AAH--7U_pSuGzmJIQ8UMImL54v2mBJgMHvY")
# dp = Dispatcher()
# router = Router()

# USER_DOCS_PATH = "./user_docs"
# openai.api_key = "sk-proj-SzjtxjbdKX2IZqdWSVn8T3BlbkFJC4y1Jw565XcmgJlqPQm2"

# documents = []  # –•—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–∞–º—è—Ç–∏

# ADMIN_USER_ID = 1574455983
# upload = 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏

# upl = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
# ])

# async def load_documents():
#     global documents
#     documents = []
#     if not os.path.exists(USER_DOCS_PATH):
#         os.makedirs(USER_DOCS_PATH)
#     for file_name in os.listdir(USER_DOCS_PATH):
#         if file_name.endswith((".md", ".rst")):
#             documents.append(file_name)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

# @router.message(CommandStart())
# async def start(message: Message):
#     await message.answer("üëãüèª –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å/–æ—à–∏–±–∫—É, –∏ —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.")
#     if message.from_user.id == ADMIN_USER_ID:
#         keyb = [
#             [KeyboardButton(text="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")],
#             [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")]
#         ]
#         keyboard = ReplyKeyboardMarkup(keyboard=keyb, resize_keyboard=True)
#         await message.answer("üõ†Ô∏è‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä—è–¥ —Ñ—É–Ω–∫—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ —É –í–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω–∫–∞.", reply_markup=keyboard)

# @router.message(Command("sync"))
# async def sync_docs(message: Message):
#     if message.from_user.id == ADMIN_USER_ID:
#         await load_documents()
#         await message.answer("üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# @router.message(lambda message: message.content_type == ContentType.DOCUMENT)
# async def handle_document(message: Message):
#     global upload
#     if message.from_user.id == ADMIN_USER_ID and upload == 1:
#         file = message.document
#         file_path = os.path.join(USER_DOCS_PATH, file.file_name)
        
#         file_info = await bot.get_file(file.file_id)
#         await bot.download_file(file_info.file_path, file_path)
        
#         if file.file_name.endswith(('.md', '.rst')):
#             documents.append(file.file_name)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
#             await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {file.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
#         else:
#             await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .md –∏–ª–∏ .rst.")

# @router.message(F.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
# async def check_docs(message: Message):
#     if message.from_user.id == ADMIN_USER_ID:
#         if not documents:
#             await message.answer("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
#         else:
#             await message.answer("\n".join(documents))

# @router.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
# async def upload_docs(message: Message):
#     global upload
#     if message.from_user.id == ADMIN_USER_ID and upload == 0:
#         upload = 1
#         await message.answer("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .md, .rst", reply_markup=upl)

# @router.callback_query()
# async def process_callback(callback_query: CallbackQuery): 
#     global upload
#     data = callback_query.data

#     if data == "cancel":
#         if upload == 1:
#             upload = 0
#             await callback_query.message.answer("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

# @router.message()
# async def search_docs(message: Message):
#     if message.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã" or message.text == "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
#         return
    
#     query = message.text
#     context = "\n\n".join(documents[-3:]) if documents else "–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    
#     try:
#         response = openai.chat.completions.create(
#             model="gpt-4o",
#             messages=[
#                 {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."},
#                 {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –°–¢–†–û–ì–û –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º."},
#                 {"role": "system", "content": "–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–∏—à–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ ###, –ª—É—á—à–µ –≤—ã–¥–µ–ª—è–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è **—Ç–µ–∫—Å—Ç**."},
#                 {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–í–æ–ø—Ä–æ—Å: {query}"}
#             ]
#         )
#         answer = response.choices[0].message.content  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
#     except Exception as e:
#         answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
#     await message.answer(answer, parse_mode="Markdown")

# async def main():
#     await load_documents()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
#     dp.include_router(router)
#     await dp.start_polling(bot)

# if __name__ == "__main__":
#     try:
#         asyncio.run(main())
#     except KeyboardInterrupt:
#         print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")